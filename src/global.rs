use redactedsecret::SecretString;
use tai64::TAI64N;
use std::path::PathBuf;

use crate::{
    TuringFeedsError,
};

pub type Result<T> = std::result::Result<T, TuringFeedsError>;

pub type UserIdentifier = SecretString;
pub type AutoGeneratedIdentifier = String; // Enables sharding and multicluster identification
pub type UserDefinedName = String;
pub type CorruptionGuard = (PathBuf, u64); // (Path, seahash)
pub type Blake2hash = String;
pub type SeaHashCipher = u64;
pub type NoOfEntries = usize;
pub type CreateTaiTime = TAI64N;
pub type ModifiedTaiTime = TAI64N;

#[derive(Debug)]
pub enum AccessRights {
    Table(String),
    Db(String),
}

#[derive(Debug)]
pub enum Role {
    SuperUser,
    Admin,
    SubAdmin,
    User,
}

#[derive(Debug)]
pub enum DbType {
    KeyValueStore,
    RealTimeFeeds,
}